<div class="thanks-container py-5">
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-lg-10">
        <div class="card shadow-lg border-0">
          <div class="card-header bg-success text-white py-4">
            <h1 class="card-title text-center mb-2">¡Gracias por completar el cuestionario!</h1>
            <p class="text-center mb-0 text-white-50">Aquí están tus resultados</p>
          </div>

          <div class="card-body p-4">
            <div class="row g-4">
              <!-- Resultados por Categoría -->
              <div class="col-12 col-md-<%= @dimension_results.present? ? '4' : '6' %>">
                <div class="result-card h-100 p-3 p-md-4 bg-light rounded">
                  <h3 class="section-title h5 mb-3 text-center">Distribución por Categoría</h3>
                  <div class="chart-container">
                    <canvas id="categoryChart"></canvas>
                  </div>
                </div>
              </div>

              <!-- Resultados por Dimensión (opcional) -->
              <% if @dimension_results.present? %>
                <div class="col-12 col-md-4">
                  <div class="result-card h-100 p-3 p-md-4 bg-light rounded">
                    <h3 class="section-title h5 mb-3 text-center">Distribución por Dimensión</h3>
                    <div class="chart-container">
                      <canvas id="dimensionChart"></canvas>
                    </div>
                  </div>
                </div>
              <% end %>

              <!-- Resultados por Foco -->
              <div class="col-12 col-md-<%= @dimension_results.present? ? '4' : '6' %>">
                <div class="result-card h-100 p-3 p-md-4 bg-light rounded">
                  <h3 class="section-title h5 mb-3 text-center">Distribución por Foco</h3>
                  <div class="chart-container">
                    <canvas id="focusChart"></canvas>
                  </div>
                </div>
              </div>
            </div>

            <div class="text-center mt-4">
              <%= link_to "Volver al inicio", root_path, class: "btn btn-primary btn-lg" %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<% content_for :styles do %>
<style>
  .thanks-container {
    background-color: #f8f9fa;
    min-height: 100vh;
  }

  .card {
    border-radius: 15px;
    overflow: hidden;
  }

  .result-card {
    transition: all 0.3s ease;
    border: 1px solid rgba(0,0,0,0.1);
  }

  .result-card:hover {
    background-color: #fff !important;
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.1);
  }

  .section-title {
    color: #2c3e50;
    font-size: 1rem;
  }

  .chart-container {
    position: relative;
    height: 250px;
    width: 100%;
  }

  @media (max-width: 768px) {
    .chart-container {
      height: 200px;
    }

    .section-title {
      font-size: 0.9rem;
    }

    .card-header h1 {
      font-size: 1.5rem;
    }
  }

  @media (max-width: 576px) {
    .chart-container {
      height: 180px;
    }
  }
</style>
<% end %>

<% content_for :scripts do %>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  function initializeCharts() {
    console.log('Inicializando gráficas...');

    const chartOptions = {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: window.innerWidth < 768 ? 'bottom' : 'right',
          labels: {
            boxWidth: window.innerWidth < 768 ? 10 : 12,
            font: {
              size: window.innerWidth < 768 ? 10 : 12
            }
          }
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              if (context.raw === undefined) return '';
              return `${context.label}: ${context.raw}% de rendimiento`;
            }
          }
        }
      },
      scales: {
        r: {
          min: 0,
          max: 100,
          beginAtZero: true,
          ticks: {
            stepSize: 20,
            callback: function(value) {
              return value + '%';
            }
          },
          pointLabels: {
            font: {
              size: window.innerWidth < 768 ? 10 : 12
            }
          }
        }
      }
    };

    const colors = [
      'rgba(54, 162, 235, 0.8)',
      'rgba(75, 192, 192, 0.8)',
      'rgba(153, 102, 255, 0.8)',
      'rgba(255, 99, 132, 0.8)',
      'rgba(255, 159, 64, 0.8)',
      'rgba(255, 205, 86, 0.8)',
      'rgba(201, 203, 207, 0.8)'
    ];

    function initializeChart(elementId, data, title) {
      console.log(`Inicializando gráfica ${title}:`, data);
      const ctx = document.getElementById(elementId);
      
      if (!ctx) {
        console.error(`No se encontró el elemento canvas con id ${elementId}`);
        return;
      }

      if (!data || Object.keys(data).length === 0) {
        console.warn(`No hay datos para la gráfica ${title}`);
        ctx.style.display = 'none';
        return;
      }

      const labels = Object.keys(data);
      const values = Object.values(data).map(v => parseFloat(v) || 0);

      const chartData = {
        labels: labels,
        datasets: [{
          label: title,
          data: values,
          backgroundColor: colors.slice(0, labels.length).map(c => c.replace('0.8', '0.2')),
          borderColor: colors.slice(0, labels.length),
          borderWidth: 2,
          pointBackgroundColor: colors.slice(0, labels.length),
          pointBorderColor: '#fff',
          pointHoverBackgroundColor: '#fff',
          pointHoverBorderColor: colors.slice(0, labels.length)
        }]
      };

      console.log(`Datos procesados para ${title}:`, chartData);

      new Chart(ctx, {
        type: 'radar',
        data: chartData,
        options: chartOptions
      });
    }

    // Datos de las gráficas
    const categoryData = <%= raw @category_results.to_json %>;
    const dimensionData = <%= raw @dimension_results.to_json %>;
    const focusData = <%= raw @focus_results.to_json %>;
    const overallScore = <%= @overall_score %>;

    console.log('Datos recibidos:', {
      categoryData,
      dimensionData,
      focusData,
      overallScore
    });

    // Inicializar gráficas
    initializeChart('categoryChart', categoryData, 'Categorías');
    initializeChart('dimensionChart', dimensionData, 'Dimensiones');
    initializeChart('focusChart', focusData, 'Focos');

    // Manejar cambios de tamaño de ventana
    window.addEventListener('resize', function() {
      const charts = Chart.getChart('categoryChart');
      if (charts) {
        charts.options.plugins.legend.position = window.innerWidth < 768 ? 'bottom' : 'right';
        charts.update();
      }
    });
  }

  // Asegurarnos de que Chart.js esté cargado
  function loadCharts() {
    if (typeof Chart === 'undefined') {
      console.log('Chart.js aún no está cargado, esperando...');
      setTimeout(loadCharts, 100);
    } else {
      console.log('Chart.js cargado, inicializando gráficas...');
      initializeCharts();
    }
  }

  // Intentar inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadCharts);
  } else {
    loadCharts();
  }
</script>
<% end %>